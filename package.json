{
  "name": "prettier-plus",
  "displayName": "Prettier+",
  "description": "Prettier (code formatter) for the VS Code.",
  "version": "3.4.0",
  "publisher": "svipas",
  "icon": "icon.png",
  "galleryBanner": {
    "color": "#ffe04b",
    "theme": "light"
  },
  "main": "./dist/extension",
  "repository": {
    "type": "git",
    "url": "https://github.com/svipas/vscode-prettier-plus.git"
  },
  "bugs": {
    "url": "https://github.com/svipas/vscode-prettier-plus/issues"
  },
  "engines": {
    "vscode": "^1.17.0"
  },
  "extensionKind": "workspace",
  "categories": [
    "Formatters"
  ],
  "activationEvents": [
    "*"
  ],
  "contributes": {
    "configuration": {
      "type": "object",
      "title": "Prettier+",
      "properties": {
        "prettier.disableLanguages": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of languages IDs to ignore. Restart required.",
          "scope": "window"
        },
        "prettier.eslintIntegration": {
          "type": "boolean",
          "default": false,
          "description": "Use 'prettier-eslint' to format JavaScript, TypeScript and Vue.",
          "scope": "resource"
        },
        "prettier.tslintIntegration": {
          "type": "boolean",
          "default": false,
          "description": "Use 'prettier-tslint' to format TypeScript.",
          "scope": "resource"
        },
        "prettier.stylelintIntegration": {
          "type": "boolean",
          "default": false,
          "description": "Use 'prettier-stylelint' to format CSS, SCSS and Less.",
          "scope": "resource"
        },
        "prettier.requireConfig": {
          "type": "boolean",
          "default": false,
          "description": "Require a config file to format code.",
          "scope": "resource"
        },
        "prettier.ignorePath": {
          "type": "string",
          "default": ".prettierignore",
          "description": "Path to a '.prettierignore' or similar file such as '.gitignore'. Files which match will not be formatted. Set to 'null' to not read ignore files. Restart required.",
          "scope": "resource"
        },
        "prettier.printWidth": {
          "type": "integer",
          "default": 80,
          "description": "Specify the line length that the printer will wrap on.",
          "scope": "resource"
        },
        "prettier.tabWidth": {
          "type": "integer",
          "default": 2,
          "description": "Specify the number of spaces per indentation-level.",
          "scope": "resource"
        },
        "prettier.singleQuote": {
          "type": "boolean",
          "default": false,
          "description": "Use single quotes instead of double quotes.",
          "scope": "resource"
        },
        "prettier.trailingComma": {
          "type": "string",
          "enum": [
            "none",
            "es5",
            "all"
          ],
          "default": "none",
          "description": "Print trailing commas wherever possible when multi-line. (A single-line array, for example, never gets trailing commas.)",
          "enumDescriptions": [
            "No trailing commas.",
            "Trailing commas where valid in ES5 (objects, arrays, etc.)",
            "Trailing commas wherever possible (including function arguments). This requires node 8 or a transform."
          ],
          "scope": "resource"
        },
        "prettier.bracketSpacing": {
          "type": "boolean",
          "default": true,
          "description": "Print spaces between brackets in object literals.",
          "scope": "resource"
        },
        "prettier.jsxBracketSameLine": {
          "type": "boolean",
          "default": false,
          "description": "Put the '>' of a multi-line JSX element at the end of the last line instead of being alone on the next line (does not apply to self closing elements).",
          "scope": "resource"
        },
        "prettier.parser": {
          "type": "string",
          "enum": [
            "",
            "babel",
            "babel-flow",
            "flow",
            "typescript",
            "css",
            "scss",
            "less",
            "json",
            "json5",
            "json-stringify",
            "graphql",
            "markdown",
            "mdx",
            "html",
            "vue",
            "angular",
            "lwc",
            "yaml"
          ],
          "default": "",
          "description": "Specify which parser to use.\nPrettier automatically infers the parser from the input file path, so you shouldn't have to change this setting.\nBoth the 'babel' and 'flow' parsers support the same set of JavaScript features (including Flow type annotations).\nThey might differ in some edge cases, so if you run into one of those you can try 'flow' instead of 'babel'.",
          "enumDescriptions": [
            "Automatically infers the parser from the input file path.",
            "Via '@babel/parser' named 'babylon' until v1.16.0",
            "Same as 'babel' but enables Flow parsing explicitly to avoid ambiguity. First available in v1.16.0",
            "Via 'flow-parser'",
            "Via '@typescript-eslint/typescript-estree'. First available in v1.4.0",
            "Via 'postcss-scss' and 'postcss-less', autodetects which to use. First available in v1.7.1",
            "Same parsers as 'css', prefers 'postcss-scss'. First available in v1.7.1",
            "Same parsers as 'css', prefers 'postcss-less'. First available in v1.7.1",
            "Via '@babel/parser parseExpression'. First available in v1.5.0",
            "Same parser as 'json', but outputs as 'json5'. First available in v1.13.0",
            "Same parser as 'json', but outputs like 'JSON.stringify'. First available in v1.13.0",
            "Via 'graphql/language'. First available in v1.5.0",
            "Via 'remark-parse'. First available in v1.8.0",
            "Via 'remark-parse' and '@mdx-js/mdx'. First available in v1.15.0",
            "Via 'angular-html-parser'. First available in 1.15.0",
            "Same parser as 'html', but also formats vue-specific syntax. First available in 1.10.0",
            "Same parser as 'html', but also formats angular-specific syntax via 'angular-estree-parser'. First available in 1.15.0",
            "Same parser as 'html', but also formats LWC-specific syntax for unquoted template attributes. First available in 1.17.0",
            "Via 'yaml' and 'yaml-unist-parser'. First available in 1.14.0"
          ],
          "scope": "resource"
        },
        "prettier.semi": {
          "type": "boolean",
          "default": true,
          "description": "Print semicolons at the ends of statements.",
          "scope": "resource"
        },
        "prettier.useTabs": {
          "type": "boolean",
          "default": false,
          "description": "Indent lines with tabs instead of spaces.",
          "scope": "resource"
        },
        "prettier.proseWrap": {
          "type": "string",
          "enum": [
            "preserve",
            "always",
            "never"
          ],
          "default": "preserve",
          "description": "By default, Prettier will wrap markdown text as-is since some services use a linebreak-sensitive renderer, e.g. GitHub comment and BitBucket. In some cases you may want to rely on editor/viewer soft wrapping instead, so this option allows you to opt out with 'never'.",
          "enumDescriptions": [
            "Wrap prose as-is. First available in v1.9.0",
            "Wrap prose if it exceeds the print width.",
            "Do not wrap prose."
          ]
        },
        "prettier.arrowParens": {
          "type": "string",
          "enum": [
            "avoid",
            "always"
          ],
          "default": "avoid",
          "description": "Include parentheses around a sole arrow function parameter.",
          "enumDescriptions": [
            "Omit parens when possible. Example: x => x",
            "Always include parens. Example: (x) => x"
          ],
          "scope": "resource"
        },
        "prettier.jsxSingleQuote": {
          "type": "boolean",
          "default": false,
          "description": "Use single quotes instead of double quotes in JSX."
        },
        "prettier.htmlWhitespaceSensitivity": {
          "type": "string",
          "enum": [
            "css",
            "strict",
            "ignore"
          ],
          "default": "css",
          "description": "Specify the global whitespace sensitivity for HTML files.",
          "enumDescriptions": [
            "Respect the default value of CSS 'display' property.",
            "Whitespaces are considered sensitive.",
            "Whitespaces are considered insensitive."
          ]
        },
        "prettier.vueIndentScriptAndStyle": {
          "type": "boolean",
          "default": false,
          "description": "Whether or not to indent the code inside <script> and <style> tags in Vue files. Some people (like the creator of Vue) donâ€™t indent to save an indentation level, but this might break code folding in your editor."
        },
        "prettier.endOfLine": {
          "type": "string",
          "enum": [
            "auto",
            "lf",
            "crlf",
            "cr"
          ],
          "default": "auto",
          "description": "Specify the end of line used by Prettier.",
          "enumDescriptions": [
            "Maintain existing line endings (mixed values within one file are normalised by looking at what's used after the first line)",
            "Line Feed only (\\n), common on Linux and macOS as well as inside git repos",
            "Carriage Return + Line Feed characters (\\r\\n), common on Windows",
            "Carriage Return character only (\\r), used very rarely"
          ]
        },
        "prettier.quoteProps": {
          "type": "string",
          "enum": [
            "as-needed",
            "consistent",
            "preserve"
          ],
          "default": "as-needed",
          "description": "Change when properties in objects are quoted.",
          "enumDescriptions": [
            "Only add quotes around object properties where required.",
            "If at least one property in an object requires quotes, quote all properties.",
            "Respect the input use of quotes in object properties."
          ]
        }
      }
    },
    "jsonValidation": [
      {
        "fileMatch": ".prettierrc",
        "url": "http://json.schemastore.org/prettierrc"
      },
      {
        "fileMatch": ".prettierrc.json",
        "url": "http://json.schemastore.org/prettierrc"
      },
      {
        "fileMatch": "package.json",
        "url": "./package-json-schema.json"
      }
    ],
    "languages": [
      {
        "id": "json",
        "filenames": [
          ".prettierrc"
        ]
      },
      {
        "id": "ignore",
        "filenames": [
          ".prettierignore"
        ]
      },
      {
        "id": "graphql",
        "extensions": [
          ".graphql"
        ]
      },
      {
        "id": "vue",
        "extensions": [
          ".vue"
        ]
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "parcel build src/extension.ts --target node",
    "compile": "NODE_ENV=development parcel build src/extension.ts --target node",
    "watch": "parcel watch src/extension.ts --target node",
    "pretest": "yarn test-compile && yarn vscode:prepublish && cd test/eslint && yarn install && cd ../tslint && yarn install && cd ../stylelint && yarn install",
    "test-compile": "tsc -p ./",
    "test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@types/glob": "^7.1.1",
    "@types/mocha": "^5.2.7",
    "@types/node": "^12.12.14",
    "@types/vscode": "^1.17.0",
    "glob": "^7.1.6",
    "mocha": "^6.2.2",
    "parcel-bundler": "^1.12.4",
    "typescript": "^3.7.2",
    "vscode-test": "^1.2.3"
  },
  "dependencies": {
    "ignore": "^5.1.4",
    "prettier": "1.19.1",
    "prettier-eslint": "^9.0.1",
    "prettier-stylelint": "^0.4.2",
    "prettier-tslint": "^0.4.2"
  },
  "keywords": [
    "prettier",
    "opinionated",
    "code",
    "formatter",
    "javascript",
    "js",
    "jsx",
    "flow",
    "typescript",
    "ts",
    "json",
    "css",
    "less",
    "scss",
    "styled-components",
    "styled-jsx",
    "markdown",
    "md",
    "commonmark",
    "mdx",
    "php",
    "pug",
    "ruby",
    "swift",
    "xml",
    "html",
    "vue",
    "angular",
    "graphql",
    "yaml",
    "yml"
  ]
}
